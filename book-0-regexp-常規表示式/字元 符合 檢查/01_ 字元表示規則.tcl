## 只取 0~9.
set infile "123 456 ab cd"

regexp {[0-9 ]+[0-9]} $infile getnum
or
regexp -all -inline -- {[0-9 ]+[0-9]} $infile

## OUTPUT: 123 456

## ==================================================================
正規表達式（Regular Expression, Regex or RegExp）簡單來說就是用一堆符號來表達對文字的一種過濾邏輯，但這堆符號又代表著什麼呢？
這篇文章想和大家分享一些自己在工作上，使用 python re模組 處理相對複雜情況時所使用的技巧。

常用的 4 種 RegExp 符號：

比對 [一個或多個字元] 的符號
[]  -->  符合在括號內的任何字元, 指定的範圍, 例如 [a-f]
[^]  -->  符合不在括號內的任何字元

具有 [定位] 功能的符號，不吃掉任何的字元
^   -->  開頭的字元 (一列之首)
$   -->  結束的字元 (一列之尾)

## ==================================================================
字元表示  -->  規則
\d  -->  任何數字字元, 相當於 [0-9]
\D  -->  任何非數字字元, 相當於 [^0-9]

\s  -->  任何空白字元 (空白,換行,tab), 相當於 [ \f\n\r\t\v]
\S  -->  任何非空白字元 (空白,換行,tab), 相當於 [^ \f\n\r\t\v]

\w  -->  任何字母, 數字 & 底線, 相當於 [A-Za-z0-9_]
\W  -->  任何非字母, 數字 & 底線, 相當於 [^A-Za-z0-9_]

\A  -->  字串開始 . Lu: 輸出結果都是 大括號 (). 例如: {} {} {} {} {} {} {} {} {} {} {} {} {} {} 
\z  -->  字串結束 . Lu: 輸出錯誤訊息 couldn't compile regular expression pattern: invalid escape \ sequence
\b  -->  邊界 (boundary); 旁邊不可有其他文數字

.  -->  所有字元 (可以用來表達任何字元)
\  -->  可以用來跳脫特殊字元

